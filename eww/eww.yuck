;; Windows
(defwindow bar
    :class "bar"
    :monitor 0
    :geometry (geometry :x "0px"
                        :y "4px"
                        :width "95%"
                        :height "20px"
                        :anchor "bottom center")
    :namespace "bar"
    :exclusive true
    
    (box
        (workspaces)
        (right)
    )
)

(defwindow big-time
    :class "big-time"
    :monitor 0
    :namespace "big-time"
    :stacking "bg"
    :geometry (geometry :x "40px"
                        :y "30px"
                        :width "300px"
                        :height "120px"
                        :anchor "top right")
    (box
        (big-time)
    )
)

;; Listeners
(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")

;; Polls
(defpoll time_poll :interval "1s" "date +%H:%M")
(defpoll battery_poll :interval "1s" "bash ./scripts/battery")

;; Widgets

(defwidget right []
    (box 
        :class "right"
        :spacing 7
        :space-evenly false
        :halign "end"
        "" (battery) 
        "" (time) 
    )
)

(defwidget volume []
    (scale
        :class "slider"
        :width 110
        :min 0
        :max 101
    )
)

(defwidget big-time []
    (box
        "${time_poll}"
    )
)


(defwidget time []
    (box 
        :class "time"
        :vexpand false
        "${time_poll} 󰅐 "
    )
)

(defwidget battery []
    (box
        :class "battery"
        "${battery_poll}"
    )
)

(defwidget music []
    (box
        (button 
            :onclick "notify-send 'Hello' 'Hello, negbi'"
            :class "music"
            (image
             :path "./images/music.png"
             :image-width 20
             :image-height 20
            )
        )
    )
)


(defwidget workspaces []
    (eventbox 
        :halign "start"
        (box
            :class "workspaces-widget"
            :space-evenly true
            (label 
                :text "${workspaces}${current_workspace}" 
                :visible false)
            (for workspace in workspaces
                (eventbox 
                    :onclick "hyprctl dispatch workspace ${workspace.id}"
                    (box 
                        :class "workspace-entry ${workspace.id == current_workspace ? 
                        "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
                    (label :text " ")
                    )
                )
            )

        )
    )
)
